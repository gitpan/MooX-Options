# PODNAME: MooX::Options::Docs::Option
# ABSTRACT: Parameter of the option keywords

__END__

=pod

=head1 NAME

MooX::Options::Docs::Option - Parameter of the option keywords

=head1 VERSION

version 4.001

=head1 DESCRIPTION

The keyword B<option> extend the keyword B<has> with specific parameters for the commandline.

=head1 OPTION PARAMETERS

=head2 doc | documentation

Documentation for the command line option.

=head2 long_doc

Documentation for the man page. By default the B<doc> parameter will be used.

See also L<Man parameters|MooX::Options::Docs::Man> for more examples to build a nice man page.

=head2 required

This attribute indicate that the parameter is mandatory.
This attribute is not really used by L<MooX::Options> but the error message will be handle by it to
display a consistant error message.

=head2 format

Format of the params. It is the same as L<Getopt::Long::Descriptive>.

=over

=item * i : integer

=item * i@: array of integer

=item * s : string

=item * s@: array of string

=item * f : float value

=back

By default, it's a boolean value.

Take a look of available format with L<Getopt::Long::Descriptive>.

You need to understand that everything is explicit here. Check L<MooX::Options::Docs::Philosophy> to understand.
So if you use L<Moose> and you attribute has B<isa => 'Array[Int]'>, that will not implied the format 'i@'.

=head2 format json : special format support

The parameter will be treat like a json string.

  option 'hash' => (is => 'ro', json => 1);

  myTools --hash='{"a":1,"b":2}' # hash = { a => 1, b => 2 }

=head2 negativable

It add the negative version for the option.

  myTools --verbose    # verbose = 1
  myTools --no-verbose # verbose = 0

=head2 repeatable

It append the the L</format> the array attribute B<@>.

I advice to add a default value to your attribute to always have an array.
Otherwise the default value will be an undefined value.

  option foo => (is => 'rw', format => 's@', default => sub { [] });

  myTools --foo="abc" --foo="def" # foo = ["abc", "def"]

=head2 autosplit

For repeatable option, you can add the autosplit feature with your specific parameters.

  option test => (is => 'ro', format => 'i@', default => sub {[]}, autosplit => ',');
  
  myTools --test=1 --test=2 # test = (1, 2)
  myTools --test=1,2,3      # test = (1, 2, 3)

It will also handle quoted params with the autosplit

  option testStr => (is => 'ro', format => 's@', default => sub {[]}, autosplit => ',');

  myTools --testStr='a,b,"c,d",e,f' # testStr ("a", "b", "c,d", "e", "f")

=head2 short

Long option can also have short version.

  option 'verbose' => (is => 'ro', repeatable => 1, short => 'v');

  myTools --verbose # verbose = 1
  myTools -v        # verbose = 1

=head2 order

Specified the order of the attribute. If you want to push some attribute at the end of the list.
By default all option has an order set to B<0>, and the option is sorted by their name.

  option 'at_the_end' => (is => 'ro', order => 999);

=head1 SEE ALSO

L<MooX::Options>

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website
https://github.com/celogeek/MooX-Options/issues

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

celogeek <me@celogeek.com>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2013 by celogeek <me@celogeek.com>.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
